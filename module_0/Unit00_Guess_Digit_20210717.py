#!/usr/bin/env python
# coding: utf-8

# Над проектом работал: Артём Знаменский
# Написать: artem.znamenskii@yandex.ru
# 
# ЮНИТ 0. Введение в Data Science > 
# Проект 0. GitHub. Самый быстрый старт. > 
# 0.3. Итоговое задание
# 
# БАЗОВЫЕ ЗАДАЧИ:
# 
# Плюс (+) напротив задачи значит, что задача выполнена.
# + 1. Запрограммировать игру угадай число на Python;
# + 2. Внимательно ознакомиться с описанием задачи для 
#      самостоятельной работы;
# + 3. Прочитать рекомендации по выполнению самостоятельного 
#      проекта;
# + 4. Ознакомиться с критериями оценивания по проекту;
# + 5. Выполнить проект и загрузить его на git;
# + 6. Сдать свой ноутбук с решением на проверку ментору;
# - 7. Получить обратную связь от ментора.
# 
# ЦЕЛЕВЫЕ ЗАДАЧИ:
# 
# + 1. Запрограммировать игру угадай число на Python;
# + 2. Разработать алгоритм угадывания числа за минимальное 
#      количество попыток;
# 
# КРИТЕРИИ ОЦЕНКИ:
# 
# 1. Качество кода. Соблюдение стандартов оформления pep-8, 
#    комментирование кода, наличие выводов — 3 балла;
# 2. Владение функциями и строковыми величинами — 3 балла;
# 3. Качество решения — 3 балла;
# 4. Оформление проекта на GitHub — 3 балла;
# 5. Работа сдана к дедлайну — 3 балла.
# 
# Значение баллов:
#     0 - задание не выполнено или результатами работы невозможно 
#         воспользоваться на практике
#     1 - есть большие неточности в выполнении задания
#     2 - задача решена, требуются минимальные доработки
#     3 - задача решена полностью, можно использовать результат на 
#         практике
# 
# РЕАЛИЗОВАНЫЕ ФУНКЦИИ
# 
# 1. Представлена функция угадывающая число за 7 и менее шагов;
# 2. Возможно сыграть в угадай число;
# 3. Возможно задать границы диапазона, 
#    в которые будет входить загаданное число;
# 4. Реализовано меню выбора режима игры или проверки 
#    алгоритма по угадыванию числа.
#
#   ДЛЯ ЗАПУСКА ИСПОЛЬЗУЙТЕ "start_game()"
#
#######################################################################
import numpy as np
import os

def set_riddle_range():
    '''Функция предлагает задать границы диапазона, 
    в которые должно входить загаданное число.'''

    print("Оставьте поле пустым,",
          "чтобы получить диапазон по умолчанию [1:100].\n", 
          "Введите два любых целых числа через запятую,",
          "для определения новых границ диапазона,\n",
          "в которые будет входить загаданное число:")
        
    answer = input()

    if not answer:
        a,b = 1,100     # Стандартный диапазон
    else:
        # достаём из ответа границы диапазона
        a,b = map(int, answer.split(","))
        # определяем нижнюю и верхнюю границы диапазона
        if a <= b:
            a,b = a,b
        elif a > b:
            a,b = b,a

    os.system('cls||clear') # Очистка терминала

    return a,b  # Выводим заданные границы диапазона

def game_core():
    '''Функция запускает игру угадай игру в ручном режими.'''
    a,b = set_riddle_range()    # Задаём границы диапазона для загаданного числа

    count = 0                          # счетчик попыток
    number = np.random.randint(a,b+1)  # загадали число
    print (f"Загадано число от {a} до {b}.")

    while True:                        # бесконечный цикл
        predict = int(input())         # предполагаемое число
        count += 1                     # плюсуем попытку
        if number == predict: break    # выход из цикла, если угадали
        elif number > predict: print (f"Угадываемое число больше {predict} ")
        elif number < predict: print (f"Угадываемое число меньше {predict} ")
            
    print (f"Вы угадали число {number} за {count} попыток.")
    return True

def digit_search_algorithm(digit):
    '''Функция подбирает загаданное число из диапазона, выводит уведомление 
    об одгаданном числе и количестве попыток. Возвращает число попыток.
    С каждым вхождением в цикл переопределятеся диапазон для искомого числа.
    Происходит отсечение той части интервала, 
    которое больше(меньше) загаданного числа И предсказания.'''
    
    a,b = 1,101                 # Границы диапазона для загаданного числа
    count = 1                   # Счетчик попыток
    predict = (a+b)/2           # Предполагаемое число
    while digit != predict:     # Цикл работает, пока число не разгадано
        count+=1                # Обновляем номер попытки
        if digit > predict: 
            # Отсекаем часть диапазона, которая меньше предполагаемого и загаданного чисел
            a = predict     
            predict = (a+b)//2   # Новое предполагаемое число
        elif digit < predict:
            # Отсекаем часть диапазона, которая больше предполагаемого и загаданного чисел
            b = predict     
            predict = (a+b)//2   # Новое предполагаемое число
            
    print(f"Компьютер угадал {digit} за {count} попыток.") # Вывод сообщения, если угадали
    return(count) # выход из цикла, если угадали

def score_game(game_core):
    '''Запускаем проверку алгоритма 1000 раз, 
    чтобы узнать, как быстро игра угадывает число'''
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(1,101, size=(1000))

    for digit in random_array:
        count_ls.append(game_core(digit))
    score = int(np.mean(count_ls))

    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return(score)

def start_game():
    '''Функция предлагает протестировать алгоритм или сыгрыть в угадай число.'''

    for n in range(5): # Даётся пять попыток

        print("Введите номер действия, которое хотите выполнить: \n",
            "1. Сыграть в угадай число \n",
            "2. Проверить работу алгоритма \n")
        answer = str(input())

        os.system('cls||clear') # Очистка терминала

        if answer == "1":
            game_core() # Играем в угадай число
            return # Завершаем программу
        elif answer == "2":
            score_game(digit_search_algorithm) # Проверяем работу алгоритма
            return # Завершаем программу
        elif n == 4:
            print("Программа завершена по причине того, что Вы робот.")
            return # Завершаем программу
        else:
            print("Вы ввели недопустимую команду. Попробуйте ещё раз. \n")

    return

#######################################################################
# Для начала программы, просто запустите "start_game"
start_game()